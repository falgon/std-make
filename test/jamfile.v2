# Copyright Vicente J. Botet Escriba 2014.

# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;
  
if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}

if ! $(STD_OPTIONAL)
{
    STD_OPTIONAL = [ modules.peek : STD_OPTIONAL ] ;
}

if ! $(BOOST_EXPECTED)
{
    BOOST_EXPECTED = [ modules.peek : BOOST_EXPECTED ] ;
}

project std_make
    : requirements
      <include>. # .cpp files in expected/test.
      <include>../include/ # make .hpp files.    
      <include>$(BOOST_ROOT) # boost .hpp files.    
      <include>$(STD_OPTIONAL) # optional.hpp file.    
      <include>$(BOOST_EXPECTED)/include # expected .hpp files.    
      <cxxflags>-DSTDEF_VERSION=2
    ;


test-suite general
    : 
      [ run make/make_pass.cpp  ]
    ;

test-suite boost_optional
    : 
      [ run make/make_boost_optional_pass.cpp  ]
    ;

#explicit boost_expected ;
test-suite boost_expected
    : 
      [ run make/make_boost_expected_pass.cpp  ]
    ;

test-suite std_array
    : 
      [ run make/make_std_array_pass.cpp  ]
    ;

test-suite std_optional
    : 
      [ run make/make_std_optional_pass.cpp  ]
    ;

test-suite std_future
    : 
      [ run make/make_std_future_pass.cpp  ]
      [ run make/make_std_shared_future_pass.cpp  ]
    ;

test-suite std_unique_ptr
    : 
      [ run make/make_std_unique_ptr_pass.cpp  ]
    ;
test-suite std_shared_ptr
    : 
      [ run make/make_std_shared_ptr_pass.cpp  ]
    ;

test-suite std_pair
    : 
      [ run make/make_std_pair_pass.cpp  ]
    ;

test-suite std_tuple
    : 
      [ run make/make_std_tuple_pass.cpp  ]
    ;

test-suite signature
    : 
      [ run make/signature_pass.cpp  ]
    ;

test-suite callable_wrapper
    : 
      [ run callable_wrapper/ex_pass.cpp  ]
    ;

test-suite stde_expected
    : 
      [ compile-fail expected/expected_no_move_constructible_fail.cpp  ]
      [ run expected/expected_pass.cpp  ]
    ;

test-suite nullable
    : 
      [ run nullable/nullable_pass.cpp  ]
      [ run nullable/nullable_std_optional_pass.cpp  ]
      [ run nullable/nullable_std_unique_ptr_pass.cpp  ]
      [ run nullable/nullable_std_shared_ptr_pass.cpp  ]

    ;

test-suite ordinal
    : 
      [ run ordinal/ordinal_pass.cpp  ]
    ;

test-suite ordinal_array
    : 
      [ run ordinal/container/ordinal_array/ordinal_array_pass.cpp  ]
    ;

test-suite ordinal_set
    : 
      [ run ordinal/container/ordinal_set/ordinal_set_pass.cpp  ]
    ;

test-suite ordinal_range
    : 
      [ run ordinal/container/ordinal_range/ordinal_range_pass.cpp  ]
    ;

test-suite product_type
    : 
      [ run product_type/struct_pass.cpp  ]
      [ run product_type/c_array_pass.cpp  ]
      [ run product_type/std_pair_pass.cpp  ]
      [ run product_type/std_tuple_pass.cpp  ]
      [ run product_type/std_array_pass.cpp  ]
    ;

test-suite sum_type
    : 
      [ run sum_type/sum_type_pass.cpp  ]
      [ run sum_type/sum_type_std_optional_pass.cpp  ]
      [ run sum_type/sum_type_std_expected_pass.cpp  ]
    ;

test-suite swappable
    : 
      [ run swappable/swap_c_array_pass.cpp  ]
    ;

test-suite range
    : 
      [ run range/range_c_array_pass.cpp  ]
      [ run range/range_std_array_pass.cpp  ]
    ;



test-suite functional
    : 
      [ run functional/overload_pass.cpp  ]
    ;

test-suite functor
    : 
      [ run functor/functor_pass.cpp  ]
      [ run functor/functor_std_optional_pass.cpp  ]
      [ run functor/functor_std_expected_pass.cpp  ]
      [ run functor/functor_std_pair_pass.cpp  ]
      [ run functor/functor_std_tuple_pass.cpp  ]
      [ run functor/functor_std_array_pass.cpp  ]
      [ run functor/functor_std_unique_ptr_pass.cpp  ]
      [ run functor/functor_std_shared_ptr_pass.cpp  ]
    ;

test-suite applicative
    : 
      [ run applicative/applicative_std_optional_pass.cpp  ]
      [ run applicative/applicative_std_expected_pass.cpp  ]
      [ run applicative/applicative_std_tuple_pass.cpp  ]
      [ run applicative/applicative_std_array_pass.cpp  ]
    ;

test-suite monad
    : 
      [ run monad/monad_std_optional_pass.cpp  ]
      [ run monad/monad_std_expected_pass.cpp  ]
    ;

test-suite mem_usage
    : 
      [ run ../example/cust_paper/mem_usage/traits/traits_test_pass.cpp  ]
      [ run ../example/cust_paper/mem_usage/overload_adl/overload_test_pass.cpp  ]
      [ run ../example/cust_paper/mem_usage/fo_overload_adl/fo_test_pass.cpp  ]
      [ run ../example/cust_paper/mem_usage/concept_overload_adl/concept_overload_test_pass.cpp  ]
    ;

test-suite std_mem_usage
    : 
      [ run ../example/cust_paper/std_mem_usage/traits/std_traits_test_pass.cpp  ]
      [ run ../example/cust_paper/std_mem_usage/fo_overload_adl/std_fo_test_pass.cpp  ]
      [ run ../example/cust_paper/std_mem_usage/concept_fo_overload_adl/std_concept_fo_test_pass.cpp  ]
      [ run ../example/cust_paper/std_mem_usage/concept_overload_adl/std_concept_overload_test_pass.cpp  ]
    ;

test-suite serializable
    : 
      [ run ../example/cust_paper/serializable/n4381/serial_test_pass.cpp  ]
    ; 

explicit fix ;
test-suite fix
    : 
      [ run make/pair_pass.cpp  ]
    ;
