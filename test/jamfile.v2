# Copyright Vicente J. Botet Escriba 2014.

# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;
  
if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}

if ! $(STD_OPTIONAL)
{
    STD_OPTIONAL = [ modules.peek : STD_OPTIONAL ] ;
}

if ! $(BOOST_EXPECTED)
{
    BOOST_EXPECTED = [ modules.peek : BOOST_EXPECTED ] ;
}

project std_make
    : requirements
      <include>. # .cpp files in expected/test.
      <include>../include/ # make .hpp files.    
      <include>$(BOOST_ROOT) # boost .hpp files.    
      <include>$(STD_OPTIONAL) # optional.hpp file.    
      <include>$(BOOST_EXPECTED)/include # expected .hpp files.    
      <cxxflags>-DSTDEF_VERSION=2
    ;


test-suite general
    : 
      [ run make/make_pass.cpp  ]
    ;

test-suite boost_optional
    : 
      [ run make/make_boost_optional_pass.cpp  ]
    ;

#explicit boost_expected ;
test-suite boost_expected
    : 
      [ run make/make_boost_expected_pass.cpp  ]
    ;

#explicit std_optional ;
test-suite std_optional
    : 
      [ run make/make_std_optional_pass.cpp  ]
    ;

#explicit std_future ;
test-suite std_future
    : 
      [ run make/make_std_future_pass.cpp  ]
      [ run make/make_std_shared_future_pass.cpp  ]
    ;

test-suite std_unique_ptr
    : 
      [ run make/make_std_unique_ptr_pass.cpp  ]
    ;
test-suite std_shared_ptr
    : 
      [ run make/make_std_shared_ptr_pass.cpp  ]
    ;

test-suite std_pair
    : 
      [ run make/make_std_pair_pass.cpp  ]
    ;

test-suite std_tuple
    : 
      [ run make/make_std_tuple_pass.cpp  ]
    ;

test-suite signature
    : 
      [ run make/signature_pass.cpp  ]
    ;

test-suite callable_wrapper
    : 
      [ run callable_wrapper/ex_pass.cpp  ]
    ;

test-suite nullable
    : 
      [ run nullable/nullable_pass.cpp  ]
      [ run nullable/nullable_std_optional_pass.cpp  ]
      [ run nullable/nullable_std_unique_ptr_pass.cpp  ]
      [ run nullable/nullable_std_shared_ptr_pass.cpp  ]

    ;

test-suite product_type
    : 
      [ run product_type/c_array_pass.cpp  ]
      [ run product_type/std_pair_pass.cpp  ]
      [ run product_type/std_tuple_pass.cpp  ]
      [ run product_type/std_array_pass.cpp  ]
    ;

test-suite swappable
    : 
      [ run swappable/swap_c_array_pass.cpp  ]
    ;

test-suite functional
    : 
      [ run functional/overload_pass.cpp  ]
    ;

explicit fix ;
test-suite fix
    : 
      [ run make/pair_pass.cpp  ]
    ;
